<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Continuous Coding</title>
    <link>https://www.continuouscoding.org/</link>
    <description>Recent content on Continuous Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 29 Dec 2019 14:00:09 +1000</lastBuildDate>
    
        <atom:link href="https://www.continuouscoding.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>What is Continuous Coding?</title>
        <link>https://www.continuouscoding.org/about/</link>
        <pubDate>Sun, 29 Dec 2019 14:00:09 +1000</pubDate>
        
        <guid>https://www.continuouscoding.org/about/</guid>
        <description>Continuous Coding is about the software development practices needed to keep the feedback loop short, the project on target, and the marathon endurance to deliver changes faster than the competition.
Inspired by a conversation in the extreme programming email group ContinuosCoding.org aims to inspire developers to implement the practices needed to write code which has few bugs, is on time, and easy to change.
Evidence has proven that companies which are able to implement Continuous Deployment have less bugs and are more competitive than companies which don&#39;t.</description>
      </item>
      
      <item>
        <title>Continuous Features</title>
        <link>https://www.continuouscoding.org/posts/1_continuous-features/</link>
        <pubDate>Sun, 29 Dec 2019 03:00:06 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/1_continuous-features/</guid>
        <description>There are numerous ways to define the feedback loop of planning. All of them have the same goal of generating the big picture.
 LEAN Agile Scrum , Kanban, XP SAFe, Less BDD DDD Event Modelling Six Sigma  As a Continuous Coder the how is less important than participating and speaking up if requirements and planning aren&#39;t clear. If you don&#39;t know why you are working on something, you will be less able to speak up and fix problems that only you are in a position to notice.</description>
      </item>
      
      <item>
        <title>Continuous Planning</title>
        <link>https://www.continuouscoding.org/posts/2_continuous-planning/</link>
        <pubDate>Sat, 28 Dec 2019 03:00:06 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/2_continuous-planning/</guid>
        <description>Planning is an important aspect of continuous coding. Many have the misconception that if you are working continuously then planning merges into other processes, but this is a mistake.
There are a few different common ways to do continuous planning. You can do all or some of this, as needed.
There are two scales at which one needs to plan. There is the high level, long term feature plan. This document is not about that.</description>
      </item>
      
      <item>
        <title>Continuous Certification</title>
        <link>https://www.continuouscoding.org/posts/3_continuous-certification/</link>
        <pubDate>Fri, 27 Dec 2019 12:00:06 +0900</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/3_continuous-certification/</guid>
        <description>Certification has gotten a bad reputation, but if approached correctly, it&#39;s invaluable.
Why do we write acceptance tests, and user stories? So we can certify our programs.
Why should we take certification exams, so we can validate our skill sets before moving forward.
Know what you want to do, and know that you can do it.
Don&#39;t fall victim to imposter syndrome or the Dunning-Kruger Effect.
How does this apply to me as a developer?</description>
      </item>
      
      <item>
        <title>Continuous Communication</title>
        <link>https://www.continuouscoding.org/posts/4_continuous-communication/</link>
        <pubDate>Thu, 26 Dec 2019 03:00:06 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/4_continuous-communication/</guid>
        <description>Topics for Continuous Communication
 Daily scrum blockers and help requests regular statements of mistakes, alternatives or concerns Psychological Safety  How does this apply to me as a developer? Why does one need to continuously communicate? What benefit does that bring to both the developer and the company? Isn&#39;t it more efficient and a better use of my time if I complete what I&#39;m working on and not bother others?</description>
      </item>
      
      <item>
        <title>Continuous Cooperation</title>
        <link>https://www.continuouscoding.org/posts/5_continuous-cooperation/</link>
        <pubDate>Wed, 25 Dec 2019 03:00:06 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/5_continuous-cooperation/</guid>
        <description>Most software development teams are actually software development groups. Don&#39;t be part of a group, be part of a team.
What does this mean? What&#39;s the difference?
A software development group is a group of people who happen to share the same general environment, but which act independently for their own concerns with their own motivations. For example, a group of people at the airport all want to get onto the same plane, and they each worry about their tickets and belongings.</description>
      </item>
      
      <item>
        <title>Continuous Refactoring</title>
        <link>https://www.continuouscoding.org/posts/6_continuous-refactoring/</link>
        <pubDate>Tue, 24 Dec 2019 21:00:06 +0900</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/6_continuous-refactoring/</guid>
        <description>Continuous Refactoring Continuous refactoring is what we need to do to maintain Continuous Integrations and to make sure our pipelines for Continuous Delivery stay robust and maintain our confidence.
Continuous refactoring means that you are constantly improving the structure of your code so that the next change is easier to make, and the next developer is realistically confident about the changes they are making.
When does continuous refactoring happen? Continuously! Ha ha, but seriously, when?</description>
      </item>
      
      <item>
        <title>Continuous Code Review</title>
        <link>https://www.continuouscoding.org/posts/7_continuous-code-review/</link>
        <pubDate>Mon, 23 Dec 2019 09:00:06 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/7_continuous-code-review/</guid>
        <description>Pair or Mob Programing Mob and Pair programming are great techniques to improve the quality and stability of the code you produce. Programming with extra sets of eyeballs creates three main competitive advantages.
 Both implicit and explicit knowledge is transferred between team members. New skills and team standards can be learned quicker than if studied independently. Sticky or tough issues get resolved more quickly, as answers come from unexpected places.</description>
      </item>
      
      <item>
        <title></title>
        <link>https://www.continuouscoding.org/posts/agile/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/agile/</guid>
        <description>Continuous Coding with Agile A quick summary of agile inspired by the tweets‚Äç of Christian Hujer @christianhujer
Nothing is more agile than gaining quick confidence After making a change, you have 90% confidence within 10 seconds, and 100% confidence within 10 minutes that the change can be released, and then you do so. This ability gives you more continuous certification, than any actual certificate. Continuous Coders embrace change, with fast feedback and Continuous everything.</description>
      </item>
      
      <item>
        <title>Continuous Certification Self Assessment tests</title>
        <link>https://www.continuouscoding.org/resources/tests/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/resources/tests/</guid>
        <description>&amp;ndash; Before you start trying to implement the skills and practices discussed in this site, try some tests to make sure you fully understand them.
Alternatively, you can take the tests to help you know what you need to understand.
Either way, the idea is to validate your assumptions, and get quick feedback on where you are going. Better to take the test and fail quickly, than to implement some ideas and find out it made things worse.</description>
      </item>
      
      <item>
        <title>Continuous reading</title>
        <link>https://www.continuouscoding.org/resources/blogs/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/resources/blogs/</guid>
        <description> Continuous Updates Continuous Delivery Continuous Integration Continuous Testing Continuous Coding Clean Coder Blog - TDD with Uncle Bob Micro skills with Arlo Belshee Marting Fowler Kent Beck James Coplien Pragmatic Programmer Code Complete https://blog.pragmaticengineer.com/ XP Mailling List TDD Mailing List  </description>
      </item>
      
      <item>
        <title>Continuous Research Papers</title>
        <link>https://www.continuouscoding.org/resources/papers/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/resources/papers/</guid>
        <description> https://github.com/papers-we-love/papers-we-love https://github.com/learn-anything/research-papers  </description>
      </item>
      
      <item>
        <title>Continuous Watching</title>
        <link>https://www.continuouscoding.org/resources/videos/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/resources/videos/</guid>
        <description></description>
      </item>
      
    
  </channel>
</rss>