[
{
	"uri": "https://www.continuouscoding.org/",
	"title": "",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/categories/",
	"title": "Categories",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/posts/",
	"title": "Concepts",
	"tags": ["index"],
	"categories": [],
	"series": [],
	"description": "Main Concepts",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/categories/continuous-coding/",
	"title": "continuous coding",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/posts/6_continuous-refactoring/",
	"title": "Continuous Refactoring",
	"tags": ["tdd", "refactoring"],
	"categories": [],
	"series": ["main concepts"],
	"description": "Using TDD, focus on the Refactoring step after your tests are passing for safe design and architecture changes.",
	"content": "How does this apply to me as a developer?  This entire section is all about being a developer. The real question is; How does this apply to other team members? For the team leads. Every step in the red/green/refactor cycle should be quick. If it's not quick you don't have a good plan For QA. Get involved with the testing plans early. Prepare the end to end and acceptance tests which the TDD cycle can enhance. This lets the TDD cycle focus on variations that will not be handled by most higher level tests, especially the error path. For everyone on the team. Test first. Know where you are going first. Have your expected outputs before you start \u0026ldquo;work\u0026rdquo;.  "
},
{
	"uri": "https://www.continuouscoding.org/series/main-concepts/",
	"title": "main concepts",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/refactoring/",
	"title": "refactoring",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/series/",
	"title": "Series",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/",
	"title": "Tags",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/tdd/",
	"title": "tdd",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/ci/cd/",
	"title": "CI/CD",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/code-reviews/",
	"title": "code reviews",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/posts/7_continuous-code-review/",
	"title": "Continuous Code Review",
	"tags": ["pair programming", "mob programming", "code reviews", "CI/CD"],
	"categories": [],
	"series": ["main concepts"],
	"description": "Use pair or mob programming techniques to increase communication and continuously review the code.",
	"content": "Pair or Mob Programing How does this apply to me as a developer?  Always pair when you can. You want to avoid dead time by waiting for code reviews. Instead advocate for code reviews during the pairing. During the pairing, you will talk about what you are doing, how you are doing it, and why you are doing it. By reviewing the code during the session, you also review the plan.  "
},
{
	"uri": "https://www.continuouscoding.org/tags/mob-programming/",
	"title": "mob programming",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/pair-programming/",
	"title": "pair programming",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/assumptions/",
	"title": "assumptions",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/certification/",
	"title": "certification",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/communication/",
	"title": "communication",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/posts/3_continuous-certification/",
	"title": "Continuous Certification",
	"tags": ["certification", "poc", "tracer-bullets", "exams", "assumptions"],
	"categories": [],
	"series": ["main concepts"],
	"description": "Not just for pointless pieces of paper. Validate your expectations. Make your expectations clear. Define your acceptance criteria.",
	"content": "Certification has gotten a bad reputation, but if approached correctly, it's invaluable.\nWhy do we write acceptance tests, and user stories? So we can certify our programs.\nWhy should we take certification exams, so we can validate our skill sets before moving forward.\nKnow what you want to do, and know that you can do it.\nHow does this apply to me as a developer?  The first step after knowing the a plan and/or a feature is to verify your assumptions. Certify that you are working on the right thing in the right way. As a developer, this is the time to advocate for Spikes and Proof of Concepts or \u0026ldquo;Tracer bullets\u0026rdquo; Certify that your usage of terms is consistent across the company. In the above example, of Spikes, Tracer Bullets and PoCs, they can all be the same, and they can all be different. Certify with your team how you will be doing these things. Always certify. Take tests to certify your knowledge, communicate to certify your assumptions, work with small focused goals to certify your plans.  "
},
{
	"uri": "https://www.continuouscoding.org/posts/4_continuous-communication/",
	"title": "Continuous Communication",
	"tags": ["communication", "psychological-safety", "meetings"],
	"categories": [],
	"series": ["main concepts"],
	"description": "How do you communicate? The largest predictive indicator of what makes a successful team is open communication with psychological safety",
	"content": "Topics for Continuous Communication\n Daily scrum blockers and help requests regular statements of mistakes, alternatives or concerns Psychological Safety  How does this apply to me as a developer? "
},
{
	"uri": "https://www.continuouscoding.org/posts/5_continuous-cooperation/",
	"title": "Continuous Cooperation",
	"tags": [""],
	"categories": [],
	"series": ["main concepts"],
	"description": "Talk to your team mates. Move the whole team to the goal together. That means everybody, not just other developers.",
	"content": "How does this apply to me as a developer?    "
},
{
	"uri": "https://www.continuouscoding.org/tags/exams/",
	"title": "exams",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/meetings/",
	"title": "meetings",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/poc/",
	"title": "poc",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/psychological-safety/",
	"title": "psychological-safety",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/tracer-bullets/",
	"title": "tracer-bullets",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/posts/2_continuous-planning/",
	"title": "Continuous Planning",
	"tags": [""],
	"categories": [],
	"series": ["main concepts"],
	"description": "Keep communication open between all stakeholders. Revise and adapt as new information is learned.",
	"content": "Planning is an important aspect of continuous coding. Many have the misconception that if you are working continuously then planning merges into other processes, but this is a mistake.\nThere are a few different common ways to do continuous planning. You can do all or some of this, as needed.\nThere are two scales at which one needs to plan. There is the high level, long term feature plan. This document is not about that. This is about the daily planning that must take place whenever work is to be done.\n Daily Standup Regular retrospective Iteration planning Release planning Raising blockers Preparing for future work  How does this apply to me as a developer?  Never start working on code until you have a clear plan of action. Between every Red/Green phase, refactoring isn't just about removing code duplication or fixing variables names. It's a time to plan and think about where the project is headed. Are we moving in the right direction, or is this going to give us problems later on? Every step of the feedback loop is a time to plan and think. The longer we go without feedback, the longer we go without planning. The less we plan, the more mistakes we will make. The more mistakes, the more wasted work. Don't confuse planning with knowing what to do. An important part of any plan is how to respond to feedback, and reduce wasted work by planning for feedback as soon as possible.  "
},
{
	"uri": "https://www.continuouscoding.org/tags/agile/",
	"title": "agile",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/bdd/",
	"title": "BDD",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/posts/1_continuous-features/",
	"title": "Continuous Features",
	"tags": ["agile", "LEAN", "SAFe", "Scrum", "Less", "BDD", "DDD", "Feature"],
	"categories": [],
	"series": ["main concepts"],
	"description": "At the highest level, everything worth working on is a feature. Plan them out, have a goal, determine the customer, define the story.",
	"content": "There are numerous ways to define the feedback loop of planning. All of them have the same goal of generating the big picture.\n LEAN Agile Scrum SAFe Less BDD DDD  As a Continuous Coder the how is less important than participating and speaking up if requirements and planning aren't clear. If you don't know why you are working on something, you will be less able to speak up and fix problems that only you are in a position to notice.\nYou may not have the authority, but you do have the responsibility.\nHow does this apply to me as a developer?   Conway's law is most applicable during the feature definition phase of software development. This means that when practicing continuous coding, the language of the organization, and therefore the language of the variables and classes used within your code is going to be highly correlated to how features are organized.\n  For example, if you are working in a LEAN environment, your code will likely be set up as experiments, quick to throw away or be rewritten. If working in an Agile environment your code might be focused around UseCase Classes with the execute() function.\n   "
},
{
	"uri": "https://www.continuouscoding.org/tags/ddd/",
	"title": "DDD",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/feature/",
	"title": "Feature",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/lean/",
	"title": "LEAN",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/less/",
	"title": "Less",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/safe/",
	"title": "SAFe",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/tags/scrum/",
	"title": "Scrum",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/archive/",
	"title": "Archive",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Archive Page",
	"content": "archive page\n"
},
{
	"uri": "https://www.continuouscoding.org/resources/blogs/",
	"title": "Blogs to learn from",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "This is a simple list of blogs which delve deaper into the concepts of Continuous Coding by various other names",
	"content": " Clean Coder Blog - TDD with Uncle Bob Micro skills with Arlo Belshee https://blog.pragmaticengineer.com/  "
},
{
	"uri": "https://www.continuouscoding.org/resources/papers/",
	"title": "Research Papers",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Ideas are just opinions until you have data to back them up. Here are links to research papers.",
	"content": " https://github.com/papers-we-love/papers-we-love https://github.com/learn-anything/research-papers  "
},
{
	"uri": "https://www.continuouscoding.org/resources/",
	"title": "Resources",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/resources/tests/",
	"title": "Self Assessment tests",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Tests to give you the confidence that you have the skill to implement best practices",
	"content": "\u0026ndash; Before you start trying to implement the skills and practices discussed in this site, try some tests to make sure you fully understand them.\nAlternatively, you can take the tests to help you know what you need to understand.\nEither way, the idea is to validate your assumptions, and get quick feedback on where you are going. Better to take the test and fail quickly, than to implement some ideas and find out it made things worse.\nTests for SOLID   https://www.flexiquiz.com/SC/N/bcbc850d-a6ee-4d76-940a-d016cffac68b\n  (Accepting pull requests for new tests)\n  "
},
{
	"uri": "https://www.continuouscoding.org/resources/videos/",
	"title": "videos",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Relevant Videos",
	"content": ""
},
{
	"uri": "https://www.continuouscoding.org/about/",
	"title": "What is Continuous Coding?",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Continuous Coding - helping to increase the feedback loop during development for quicker development with less bugs.",
	"content": "Continuous Coding is about the software development practices needed to keep the feedback loop short, the project on target, and the marathon endurance to deliver changes faster than the competition.\nInspired by a conversation in the extreme programming email group ContinuosCoding.org aims to inspire developers to implement the practices needed to write code which has few bugs, is on time, and easy to change.\nEvidence has proven that companies which are able to implement Continuous Deployment have less bugs and are more competitive than companies which don't. Companies which are able to enable a DevOps culture, report even greater quality of software and services. In order to accomplish a Continuous Deployment a company needs to be able to first implement Continuous Integration.\nIt is the contention of this group that the safest and most efficient way to accomplish Continuous integration is to practice Continuous Coding.\nJFrog wrote in Liquid Software that beyond Continuous Deployments we must be able to also implement Continuous Updates. Updates to devices and machines which the software development team does not have direct control. For this future to become our new reality, Continuos Coding practices are a must, lest we endanger people with the software we write.\nConcepts Continuous Coding is modeled off eXtreme Programming. There are seven high level concepts which all good practices fit in. Some concepts might sound like they don't apply to developers, or only to developers with authority. But that is not the case.\n continuous features continuous planning continuous certification continuous communication continuous cooperation continuous code review continuous refactoring  "
}]