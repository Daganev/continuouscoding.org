<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Continuous Coding</title>
    <link>https://www.continuouscoding.org/</link>
    <description>Recent content on Continuous Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 08 Dec 2019 21:00:06 +0900</lastBuildDate>
    
        <atom:link href="https://www.continuouscoding.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>Continuous Refactoring</title>
        <link>https://www.continuouscoding.org/posts/6_continuous-refactoring/</link>
        <pubDate>Sun, 08 Dec 2019 21:00:06 +0900</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/6_continuous-refactoring/</guid>
        <description>How does this apply to me as a developer?  This entire section is all about being a developer. The real question is; How does this apply to other team members? For the team leads. Every step in the red/green/refactor cycle should be quick. If it&#39;s not quick you don&#39;t have a good plan For QA. Get involved with the testing plans early. Prepare the end to end and acceptance tests which the TDD cycle can enhance.</description>
      </item>
      
      <item>
        <title>Continuous Code Review</title>
        <link>https://www.continuouscoding.org/posts/7_continuous-code-review/</link>
        <pubDate>Sun, 08 Dec 2019 18:00:06 +0900</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/7_continuous-code-review/</guid>
        <description>Pair or Mob Programing How does this apply to me as a developer?  Always pair when you can. You want to avoid dead time by waiting for code reviews. Instead advocate for code reviews during the pairing. During the pairing, you will talk about what you are doing, how you are doing it, and why you are doing it. By reviewing the code during the session, you also review the plan.</description>
      </item>
      
      <item>
        <title>Continuous Certification</title>
        <link>https://www.continuouscoding.org/posts/3_continuous-certification/</link>
        <pubDate>Sun, 08 Dec 2019 12:00:06 +0900</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/3_continuous-certification/</guid>
        <description>Certification has gotten a bad reputation, but if approached correctly, it&#39;s invaluable.
Why do we write acceptance tests, and user stories? So we can certify our programs.
Why should we take certification exams, so we can validate our skill sets before moving forward.
Know what you want to do, and know that you can do it.
How does this apply to me as a developer?  The first step after knowing the a plan and/or a feature is to verify your assumptions.</description>
      </item>
      
      <item>
        <title>Continuous Communication</title>
        <link>https://www.continuouscoding.org/posts/4_continuous-communication/</link>
        <pubDate>Sun, 08 Dec 2019 12:00:06 +0900</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/4_continuous-communication/</guid>
        <description>Topics for Continuous Communication
 Daily scrum blockers and help requests regular statements of mistakes, alternatives or concerns Psychological Safety  How does this apply to me as a developer? </description>
      </item>
      
      <item>
        <title>Continuous Cooperation</title>
        <link>https://www.continuouscoding.org/posts/5_continuous-cooperation/</link>
        <pubDate>Sun, 08 Dec 2019 12:00:06 +0900</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/5_continuous-cooperation/</guid>
        <description>How does this apply to me as a developer?    </description>
      </item>
      
      <item>
        <title>Continuous Planning</title>
        <link>https://www.continuouscoding.org/posts/2_continuous-planning/</link>
        <pubDate>Mon, 18 Nov 2019 12:00:06 +0900</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/2_continuous-planning/</guid>
        <description>Planning is an important aspect of continuous coding. Many have the misconception that if you are working continuously then planning merges into other processes, but this is a mistake.
There are a few different common ways to do continuous planning. You can do all or some of this, as needed.
There are two scales at which one needs to plan. There is the high level, long term feature plan. This document is not about that.</description>
      </item>
      
      <item>
        <title>Continuous Features</title>
        <link>https://www.continuouscoding.org/posts/1_continuous-features/</link>
        <pubDate>Sat, 16 Nov 2019 12:00:06 +0900</pubDate>
        
        <guid>https://www.continuouscoding.org/posts/1_continuous-features/</guid>
        <description>There are numerous ways to define the feedback loop of planning. All of them have the same goal of generating the big picture.
 LEAN Agile Scrum SAFe Less BDD DDD  As a Continuous Coder the how is less important than participating and speaking up if requirements and planning aren&#39;t clear. If you don&#39;t know why you are working on something, you will be less able to speak up and fix problems that only you are in a position to notice.</description>
      </item>
      
      <item>
        <title>Blogs to learn from</title>
        <link>https://www.continuouscoding.org/resources/blogs/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/resources/blogs/</guid>
        <description> Clean Coder Blog - TDD with Uncle Bob Micro skills with Arlo Belshee https://blog.pragmaticengineer.com/  </description>
      </item>
      
      <item>
        <title>Research Papers</title>
        <link>https://www.continuouscoding.org/resources/papers/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/resources/papers/</guid>
        <description> https://github.com/papers-we-love/papers-we-love https://github.com/learn-anything/research-papers  </description>
      </item>
      
      <item>
        <title>Self Assessment tests</title>
        <link>https://www.continuouscoding.org/resources/tests/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/resources/tests/</guid>
        <description>&amp;ndash; Before you start trying to implement the skills and practices discussed in this site, try some tests to make sure you fully understand them.
Alternatively, you can take the tests to help you know what you need to understand.
Either way, the idea is to validate your assumptions, and get quick feedback on where you are going. Better to take the test and fail quickly, than to implement some ideas and find out it made things worse.</description>
      </item>
      
      <item>
        <title>videos</title>
        <link>https://www.continuouscoding.org/resources/videos/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/resources/videos/</guid>
        <description></description>
      </item>
      
      <item>
        <title>What is Continuous Coding?</title>
        <link>https://www.continuouscoding.org/about/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.continuouscoding.org/about/</guid>
        <description>Continuous Coding is about the software development practices needed to keep the feedback loop short, the project on target, and the marathon endurance to deliver changes faster than the competition.
Inspired by a conversation in the extreme programming email group ContinuosCoding.org aims to inspire developers to implement the practices needed to write code which has few bugs, is on time, and easy to change.
Evidence has proven that companies which are able to implement Continuous Deployment have less bugs and are more competitive than companies which don&#39;t.</description>
      </item>
      
    
  </channel>
</rss>